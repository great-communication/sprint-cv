@{
    Page.Title = "CVs";
    Layout = "~/_SiteLayout.cshtml";

    CurrentUser user = new CurrentUser();
    CV cv = new CV(user);
    var CVToEdit = "create new";
    string downloadClicked = "false";

    if (IsPost)
    {
        var action = Request["action"];
        if (action == "delete")
        {
            var CVId = Request["cv-id"];

            cv.DeleteCV(CVId);
        }
        else if (action == "download")
        {
            downloadClicked = "true";
            var CVId = Request["cv-id"];
            cv.LoadCV(CVId);
        }
    }
}

<script src="~/Scripts/jspdf.min.js" type="text/javascript"></script>
<script src="~/Scripts/cv-themes.js" type="text/javascript"></script>
<script src="~/Scripts/dom-to-image.min.js" type="text/javascript"></script>

<script type="text/javascript">
    var downloadClicked = @Html.Raw(downloadClicked);    
    var img = new Image();

    $(function () {
        if (downloadClicked) {
            var cv = assembleCV();
            var styledCV = styleCV("@cv.Theme", cv);
            $('#hidden-cv-container').html(styledCV);           

            //Convert the cv to an image
            //Only rendered elements can be converted to image, so to "hide" the CV we position it off-screen
            var cvContainer = document.getElementById('hidden-cv-container');
            var position = cvContainer.style.position;
            var left = cvContainer.style.left;
            cvContainer.style.position = 'absolute';
            cvContainer.style.left = '-9999px';            
            
            domtoimage.toJpeg(cvContainer, {
                style: {
                    // Revert the off-screen positioning                    
                    position: position,
                    left: left
                }
            })
                .then(function (dataUrl) {
                    img.onload = createPdf;                    
                    img.pdfName = cv.documentName;                    
                    img.src = dataUrl;                    
                })
                .catch(function (error) {
                    alert('PDF creation failed! Error: '  + error);
                });
        }

        $('.cv-table').on('click', '.download', function () {
            var elementId = $(this).attr('id');
            var CVId = elementId.replace("name-cv-", "");
            $('#action').val("download");
            $('#cv-id').val(CVId);
            $('#post-action').submit();           
        });
        $('.cv-table').on('click', '.delete', function () {
            var elementId = $(this).attr('id');
            var CVId = elementId.replace("delete-cv-", "");
            var documentName = $("#name-cv-" + CVId).html();
            if (confirm("Are you sure you want to delete " + documentName + "?")) {
                $('#action').val("delete");
                $('#cv-id').val(CVId);
                $('#post-action').submit();
            }
        });
        $('.cv-table').on('click', '.edit', function () {
            var elementId = $(this).attr('id');
            var CVId = elementId.replace("edit-cv-", "");
            $('#CVToEdit').val(CVId);
            $('#go-to-CreateCV').submit();
        });
        $('#create-new-cv').on('click', function () {
            @{
                var temp = "";
                if (!user.HasTooManyCVs()) {
                    temp = "$('#go-to-CreateCV').submit()";
                } else
                {
                    temp = "alert('CV limit reached! Please delete or edit an existing CV to continue.')";
                }
            }
            @Html.Raw(temp);
        });
    });

    function createPdf() {
        //Split the image into multiple pages
        //and add them to the pfd document
        var canvas = document.createElement('canvas'); 
        var ctx = canvas.getContext("2d");                      
        var pdf = new jsPDF("p", "mm", "a4");    
        var pageHeight = 900;
        var xOffset = 20;
        var yOffset = -70;
        var numberOfPages = parseInt(img.height / pageHeight)+1;        
        canvas.width = img.width;
        canvas.height = pageHeight;

        ctx.fillStyle = "white";
        ctx.fillRect(0, 0, canvas.width, canvas.height);
            
        for (let i = 0; i < numberOfPages; i++) {
            ctx.drawImage(this, 0, yOffset - (i * pageHeight), img.width, img.height); // img, x, y, w, h           

            pdf.addImage(canvas.toDataURL("image/jpeg"), 'JPEG', 0, xOffset);
            if (i + 1 != numberOfPages) {
                pdf.addPage();
            }

            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.fillStyle = "white";
            ctx.fillRect(0, 0, canvas.width, canvas.height);            
        }  

        var documentName = img.pdfName.replace(/[^\w\s]/gi, '');
        if (documentName == "") {
            documentName = "cv";
        }       
        
        pdf.save(documentName +".pdf");
        
        canvas.parentNode.removeChild(canvas);        
    }

    function assembleCV() {
        //Copy all info from C# object to JS object
        var cv = {
            documentName: "@Html.Raw(cv.DocumentName)",
            firstName: "@Html.Raw(cv.FirstName)",
            lastName: "@Html.Raw(cv.LastName)",
            email: "@Html.Raw(cv.Email)",
            phoneNumber: "@Html.Raw(cv.PhoneNumber)",
            website: "@Html.Raw(cv.Website)",
            address: "@Html.Raw(cv.ReplaceLineBreaks(cv.Address))",
            summary: "@Html.Raw(cv.ReplaceLineBreaks(cv.Summary))",
            educations: assembleEducations(),
            experiences: assembleExperiences()
        };

        return cv;
    }

    function assembleEducations() {
        //Copy all info from C# object to JS object
        var educations = [];
        @foreach (var e in cv.educations){
            <text>
                educations.push({
                    startDate: "@Html.Raw(e.StartDate)",
                    endDate: "@Html.Raw(e.EndDate)",
                    position: "@Html.Raw(e.Degree)",
                    company: "@Html.Raw(e.School)",
                    summary: "@Html.Raw(cv.ReplaceLineBreaks(e.Summary))"
                });
            </text>
        }

        return educations;
    }

    function assembleExperiences() {
        //Copy all info from C# object to JS object
        var experiences = [];
         @foreach (var e in cv.experiences){
            <text>
                experiences.push({
                    startDate: "@Html.Raw(e.StartDate)",
                    endDate: "@Html.Raw(e.EndDate)",
                    position: "@Html.Raw(e.Position)",
                    company: "@Html.Raw(e.Company)",
                    summary: "@Html.Raw(cv.ReplaceLineBreaks(e.Summary))"
                });
            </text>
        }

        return experiences;
    }
</script>

<div class="biggertextsize">
    <h2>CVs</h2>
    <p>With a sprintCV you have a head start on securing that dream job of yours!</p>


    <h4>Your CVs:</h4>
    <table class="cv-table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Created</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @Html.Raw(user.GetCVTableContent())
        </tbody>
    </table>
    <form id="post-action" form action="" method="post">
        <input id="action" type="hidden" name="action" value="" />
        <input id="cv-id" type="hidden" name="cv-id" value="" />
    </form>
    <div>
        <form id="go-to-CreateCV" form action="~/Members/CreateCV.cshtml" method="post">
            <input id="CVToEdit" type="hidden" name="CVToEdit" value="@CVToEdit" />
        </form>
        <span id="create-new-cv" class="link">Create a new CV!</span>
    </div>
</div>

<div id="hidden-cv-container" style="width:21cm; background: white;"></div>
